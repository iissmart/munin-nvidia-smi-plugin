#!/bin/bash
# -*- sh -*-

: << =cut

=head1 NAME

nvidia_smi_ - Wildcard plugin to monitor NVIDIA GPUs. Uses nvidia-smi utility,
usually bundled with NVIDIA GPU driver, to obtain information.

=head1 CONFIGURATION

This is a wildcard plugin. The wildcard prefix link name should be the
value to monitor.

This plugin uses the following configuration variables:

 [nvidia_smi_*]
  env.smiexec - Location of nvidia-smi executable.
  env.warning - Warning temperature
  env.critical - Critical temperature

=head2 DEFAULT CONFIGURATION

The default configuration is to set "env.smiexec" to /usr/bin/nvidia-smi and
assume warning and critical temperatures of 91 and 94 degrees celsius, respectively.

=head2 EXAMPLE WILDCARD USAGE

C<ln -s /usr/share/munin/plugins/nvidia_smi_ /etc/munin/plugins/nvidia_smi_temp>

...will monitor the temperature of available GPUs.

=head1 AUTHOR

Original work: Nuno Fachada
faken@fakenmc.com

Enhancements: Ken Link
klink@numberzero.org

=head1 LICENSE

 GNU General Public License, version 2
 http://www.gnu.org/licenses/gpl-2.0.html

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf suggest

 GPU 00000000:17:00.0
    PCI
        GPU Link Info
            PCIe Generation
                Max                       : 3
                Current                   : 3
                Device Current            : 3
                Device Max                : 3
                Host Max                  : 3
            Link Width
                Max                       : 16x
                Current                   : 16x
        Replays Since Reset               : 0
        Replay Number Rollovers           : 0
        Tx Throughput                     : 0 KB/s
        Rx Throughput                     : 0 KB/s
    Fan Speed                             : N/A
    Performance State                     : P0
    Clocks Event Reasons
        Idle                              : Not Active
        Applications Clocks Setting       : Not Active
        SW Power Cap                      : Not Active
        HW Slowdown                       : Not Active
            HW Thermal Slowdown           : Not Active
            HW Power Brake Slowdown       : Not Active
        Sync Boost                        : Not Active
        SW Thermal Slowdown               : Not Active
        Display Clock Setting             : Not Active
    FB Memory Usage
        Total                             : 7680 MiB
        Reserved                          : 73 MiB
        Used                              : 0 MiB
        Free                              : 7606 MiB
    BAR1 Memory Usage
        Total                             : 256 MiB
        Used                              : 2 MiB
        Free                              : 254 MiB
    Utilization
        Gpu                               : 1 %
        Memory                            : 0 %
        Encoder                           : 0 %
        Decoder                           : 0 %
    Encoder Stats
        Active Sessions                   : 0
        Average FPS                       : 0
        Average Latency                   : 0
    FBC Stats
        Active Sessions                   : 0
        Average FPS                       : 0
        Average Latency                   : 0
    ECC Errors
        Volatile
            Single Bit
                Device Memory             : 0
            Double Bit
                Device Memory             : 0
        Aggregate
            Single Bit
                Device Memory             : 0
            Double Bit
                Device Memory             : 0
    Retired Pages
        Single Bit ECC                    : 0
        Double Bit ECC                    : 0
    GPU Power Readings
        Power Draw                        : 23.40 W
        Current Power Limit               : 75.00 W
        Requested Power Limit             : 75.00 W
        Default Power Limit               : 75.00 W
        Min Power Limit                   : 60.00 W
        Max Power Limit                   : 75.00 W
    Clocks
        Graphics                          : 885 MHz
        SM                                : 885 MHz
        Memory                            : 2999 MHz
        Video                             : 784 MHz
    Applications Clocks
        Graphics                          : 885 MHz
        Memory                            : 3003 MHz
    Default Applications Clocks
        Graphics                          : 885 MHz
        Memory                            : 3003 MHz
    Max Clocks
        Graphics                          : 1531 MHz
        SM                                : 1531 MHz
        Memory                            : 3003 MHz
        Video                             : 1379 MHz
    Max Customer Boost Clocks
        Graphics                          : 1113 MHz


=cut

# Determine name of parameter to monitor
name=$(basename "$0" | sed 's/^nvidia_smi_//g')

# Get location of nvidia-smi executable or use default
nvSmiExec=${smiexec:-'/usr/bin/nvidia-smi'}

# Check if autoconf was requested
if [ "$1" = "autoconf" ]; then
	# Autoconf only returns yes if nvidia-smi exists and is executable
	if [ -x "$nvSmiExec" ]; then
		echo yes
		exit 0
	else
		echo "no (nvidia-smi executable not found)"
		exit 0
	fi
fi

# Check if suggest was requested
if [ "$1" = "suggest" ]; then
	echo "temp"
	echo "mem_fb"
	echo "mem_bar"
	echo "fan"
	echo "power"
	echo "utilization"
	echo "rx"
	echo "tx"
	echo "ecc"
	echo "pcie"
	exit 0
fi

# Get number of GPUs
nGpusOutput=$("$nvSmiExec" -L)
nGpus=$(echo "$nGpusOutput" | wc -l)
if [ "$nGpus" -eq 0 ]; then
	# Exit if no GPUs found
	echo "No NVIDIA GPUs detected. Exiting."
	exit 1
fi

# Get full output from nvidia-smi
smiOutput=$("$nvSmiExec" -q)

# Check if config was requested
if [ "$1" = "config" ]; then

	# Get driver version
	driverVersion=$(echo "$smiOutput" | grep "Driver Version" | cut -d : -f 2 | tr -d ' ')

	# Configure graph depending on what which quantity will be plotted
	case $name in
		temp)
			echo 'graph_title GPU temperature'
			echo 'graph_args -l 0 -u 120'
			echo 'graph_vlabel degrees Celsius'
			echo 'graph_category sensors'
			echo "graph_info Temperature information for NVIDIA GPUs using driver version $driverVersion"
			nGpusCounter=0
			while [ $nGpusCounter -lt "$nGpus" ]
			do
				gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d \( -f 1)
				echo "${name}${nGpusCounter}.warning ${warning:-91}"
				echo "${name}${nGpusCounter}.critical ${critical:-94}"
				echo "${name}${nGpusCounter}.info Temperature information for $gpuName"
				: $((nGpusCounter=nGpusCounter+1))
			done
			;;
		mem_fb)
			# First determine total memory of each GPU...
			# gpusTotalMemOutput=$(echo "$smiOutput" | grep -v BAR1 | grep -A 3 "Memory Usage" | grep "Total" | cut -d : -f 2 | tr -d ' ')
			# nGpusCounter=0
			# while [ $nGpusCounter -lt "$nGpus" ]
			# do
			# 	gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d \( -f 1)
			# 	echo "${name}${nGpusCounter}.info Memory information for $gpuName"
			# 	gpuMem=$(echo "$gpusTotalMemOutput"| sed -n $((nGpusCounter+1))p)
			# done
			# # ...then output config data.
			# echo 'graph_title GPU memory usage'
			# echo 'graph_args -l 0 -u 10240'
			# echo 'graph_vlabel MB'
			# echo 'graph_category memory'
			# echo "graph_info FB Memory usage for NVIDIA GPUs using driver version $driverVersion"
			;;
		fan)
			echo 'graph_title GPU fan speed'
			echo 'graph_args -l 0 -u 100'
			echo 'graph_vlabel %'
			echo 'graph_category sensors'
			echo "graph_info Fan speed of NVIDIA GPUs using driver version $driverVersion"
			nGpusCounter=0
			while [ $nGpusCounter -lt "$nGpus" ]
			do
				gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d \( -f 1)
				echo "${name}${nGpusCounter}.info Fan information for $gpuName"
				: $((nGpusCounter=nGpusCounter+1))
				done
			;;
		power)
			echo 'graph_title GPU power consumption'
			echo 'graph_vlabel Watt'
			echo 'graph_category sensors'
			echo "graph_info power consumption of NVIDIA GPUs using driver version $driverVersion"
			nGpusCounter=0
			while [ $nGpusCounter -lt "$nGpus" ]
			do
				gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d \( -f 1)
				echo "${name}${nGpusCounter}.info power consumption of $gpuName"
				: $((nGpusCounter=nGpusCounter+1))
				done
			;;
		utilization)
			echo 'graph_title GPU utilization'
			echo 'graph_args -l 0 -u 100'
			echo 'graph_vlabel %'
			echo 'graph_category system'
			echo "graph_info GPU utilization of NVIDIA GPUs using driver version $driverVersion"
			nGpusCounter=0
			while [ $nGpusCounter -lt "$nGpus" ]
			do
				gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d \( -f 1)
				echo "${name}${nGpusCounter}.info GPU utilization information for $gpuName"
				: $((nGpusCounter=nGpusCounter+1))
				done
			;;
		rx)
			echo 'graph_title GPU Rx Throughput'
			echo 'graph_vlabel Bits/sec'
			echo 'graph_category system'
			echo "graph_info Rx Throughput of NVIDIA GPUs using driver version $driverVersion"
			nGpusCounter=0
			while [ $nGpusCounter -lt "$nGpus" ]
			do
				gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d \( -f 1)
				echo "${name}${nGpusCounter}.info Rx Throughput of $gpuName"
				: $((nGpusCounter=nGpusCounter+1))
				done
			;;
		tx)
			echo 'graph_title GPU Tx Throughput'
			echo 'graph_vlabel Bits/sec'
			echo 'graph_category system'
			echo "graph_info Tx Throughput of NVIDIA GPUs using driver version $driverVersion"
			nGpusCounter=0
			while [ $nGpusCounter -lt "$nGpus" ]
			do
				gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d \( -f 1)
				echo "${name}${nGpusCounter}.info Tx Throughput of $gpuName"
				: $((nGpusCounter=nGpusCounter+1))
				done
			;;
		ecc)
			echo 'graph_title GPU ECC Statistics'
			echo 'graph_vlabel Errors'
			echo 'graph_category memory'
			echo "graph_info ECC Statistics of NVIDIA GPUs using driver version $driverVersion"
			nGpusCounter=0
			while [ $nGpusCounter -lt "$nGpus" ]
			do
				gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d \( -f 1)
				echo "${name}${nGpusCounter}.vsb.info Volatile Single Bit ECC Errors of $gpuName"
				echo "${name}${nGpusCounter}.vdb.info Volatile Double Bit ECC Errors of $gpuName"
				echo "${name}${nGpusCounter}.asb.info Aggregate Single Bit ECC Errors of $gpuName"
				echo "${name}${nGpusCounter}.adb.info Aggregate Double Bit ECC Errors of $gpuName"
				: $((nGpusCounter=nGpusCounter+1))
				done
			;;
		pcie)
			echo 'graph_title GPU PCIe Generation'
			echo 'graph_vlabel Generation'
			echo 'graph_category system'
			echo "graph_info PCIe Generation of NVIDIA GPUs using driver version $driverVersion"

			gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d \( -f 1)
			echo "max.info PCIe Max of $gpuName"
			echo "current.info PCIe Current of $gpuName"
			echo "dev_max.info PCIe Device Max of $gpuName"
			echo "dev_current.info PCIe Device Current of $gpuName"
			echo "host_max.info PCIe Host Max of $gpuName"
			echo "link_max.info Link Width Max of $gpuName"
			echo "link_current.info Link Width Current of $gpuName"
			echo "label $gpuName"
			;;
		*)
			echo "Can't run without a proper symlink. Exiting."
			echo "Try running munin-node-configure --suggest."
			exit 1
			;;
	esac

	exit 0
fi

# Get requested value
case $name in
	temp)
		valueGpus=$(echo "$smiOutput" | grep "GPU Current Temp" | cut -d : -f 2 | cut -d ' ' -f 2)
		;;
	mem_fb)
		totalMemGpus=$(echo "$smiOutput" | grep -v BAR1 | grep -A 3 "Memory Usage" | grep "Total" | cut -d : -f 2 | cut -d ' ' -f 2)
		usedMemGpus=$(echo "$smiOutput" | grep -v BAR1 | grep -A 3 "Memory Usage" | grep "Used" | cut -d : -f 2 | cut -d ' ' -f 2)
		valueGpus=''
		nGpusCounter=0
		while [ $nGpusCounter -lt "$nGpus" ]
		do
			totalMemGpu=$(echo "$totalMemGpus" | sed -n $((nGpusCounter+1))p)
			usedMemGpu=$(echo "$usedMemGpus" | sed -n $((nGpusCounter+1))p)
			percentMemUsed=$((usedMemGpu*100/totalMemGpu))
			valueGpus="${valueGpus}${percentMemUsed}"$'\n'
			: $((nGpusCounter=nGpusCounter+1))
		done
		;;
	fan)
		valueGpus=$(echo "$smiOutput" | grep "Fan Speed" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		;;
	power)
		valueGpus=$(echo "$smiOutput" | grep "Power Draw" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		;;
	utilization)
		valueGpus=$(echo "$smiOutput" | grep "Gpu" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		;;
	rx)
		rxGpus=$(echo "$smiOutput" | grep "Rx Throughput" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		valueGpus=''
		nGpusCounter=0
		while [ $nGpusCounter -lt "$nGpus" ]
		do
			kiloBitsPerSecond=$(echo "$rxGpus" | sed -n $((nGpusCounter+1))p)
			bitsPerSecond=$((kiloBitsPerSecond*1024))
			valueGpus="${valueGpus}${bitsPerSecond}"$'\n'
			: $((nGpusCounter=nGpusCounter+1))
		done
		;;
	tx)
		txGpus=$(echo "$smiOutput" | grep "Tx Throughput" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		valueGpus=''
		nGpusCounter=0
		while [ $nGpusCounter -lt "$nGpus" ]
		do
			kiloBitsPerSecond=$(echo "$txGpus" | sed -n $((nGpusCounter+1))p)
			bitsPerSecond=$((kiloBitsPerSecond*1024))
			valueGpus="${valueGpus}${bitsPerSecond}"$'\n'
			: $((nGpusCounter=nGpusCounter+1))
		done
		;;
	ecc)
		txGpus=$(echo "$smiOutput" | grep "Tx Throughput" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		valueGpus=''
		nGpusCounter=0
		while [ $nGpusCounter -lt "$nGpus" ]
		do
			kiloBitsPerSecond=$(echo "$txGpus" | sed -n $((nGpusCounter+1))p)
			bitsPerSecond=$((kiloBitsPerSecond*1024))
			valueGpus="${valueGpus}${bitsPerSecond}"$'\n'
			: $((nGpusCounter=nGpusCounter+1))
		done
		;;
	pcie)
		pcieGen=$(echo "$smiOutput" | grep -A 8 "PCIe Generation")

		max=$(echo "$pcieGen" | grep "Max" | head -n 1 | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "max.value ${max}"

		current=$(echo "$pcieGen" | grep "Current" | head -n 1 | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "current.value ${current}"

		device_current=$(echo "$pcieGen" | grep "Device Current" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "device_current.value ${device_current}"

		device_max=$(echo "$pcieGen" | grep "Device Max" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "device_max.value ${device_max}"

		host_max=$(echo "$pcieGen" | grep "Host Max" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "host_max.value ${host_max}"

		link_max=$(echo "$pcieGen" | grep -A 2 "Link Width" | grep "Max" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "link_max.value ${link_max}"

		link_current=$(echo "$pcieGen" | grep -A 2 "Link Width" | grep "Current" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "link_current.value ${link_current}"
		;;
	*)
		echo "Can't run without a proper symlink. Exiting."
		echo "Try running munin-node-configure --suggest."
		exit 1
		;;
	esac
