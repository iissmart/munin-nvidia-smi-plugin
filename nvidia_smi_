#!/bin/bash
# -*- sh -*-

: << =cut

=head1 NAME

nvidia_smi_ - Wildcard plugin to monitor NVIDIA GPUs. Uses nvidia-smi utility,
usually bundled with NVIDIA GPU driver, to obtain information.

=head1 CONFIGURATION

This is a wildcard plugin. The wildcard prefix link name should be the
value to monitor.

This plugin uses the following configuration variables:

 [nvidia_smi_*]
  env.smiexec - Location of nvidia-smi executable.
  env.warning - Warning temperature
  env.critical - Critical temperature

=head2 DEFAULT CONFIGURATION

The default configuration is to set "env.smiexec" to /usr/bin/nvidia-smi and
assume warning and critical temperatures of 91 and 94 degrees celsius, respectively.

=head2 EXAMPLE WILDCARD USAGE

C<ln -s /usr/share/munin/plugins/nvidia_smi_ /etc/munin/plugins/nvidia_smi_temp>

...will monitor the temperature of available GPUs.

=head1 AUTHOR

Original work: Nuno Fachada
faken@fakenmc.com

Enhancements: Ken Link
klink@numberzero.org

=head1 LICENSE

 GNU General Public License, version 2
 http://www.gnu.org/licenses/gpl-2.0.html

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf suggest

    FB Memory Usage
        Total                             : 7680 MiB
        Reserved                          : 73 MiB
        Used                              : 0 MiB
        Free                              : 7606 MiB
    BAR1 Memory Usage
        Total                             : 256 MiB
        Used                              : 2 MiB
        Free                              : 254 MiB
    Encoder Stats
        Active Sessions                   : 0
        Average FPS                       : 0
        Average Latency                   : 0
    FBC Stats
        Active Sessions                   : 0
        Average FPS                       : 0
        Average Latency                   : 0
    ECC Errors
        Volatile
            Single Bit
                Device Memory             : 0
            Double Bit
                Device Memory             : 0
        Aggregate
            Single Bit
                Device Memory             : 0
            Double Bit
                Device Memory             : 0
    Retired Pages
        Single Bit ECC                    : 0
        Double Bit ECC                    : 0


=cut

# Determine name of parameter to monitor
name=$(basename "$0" | sed 's/^nvidia_smi_//g')

# Get location of nvidia-smi executable or use default
nvSmiExec=${smiexec:-'/usr/bin/nvidia-smi'}

# Check if autoconf was requested
if [ "$1" = "autoconf" ]; then
	# Autoconf only returns yes if nvidia-smi exists and is executable
	if [ -x "$nvSmiExec" ]; then
		echo yes
		exit 0
	else
		echo "no (nvidia-smi executable not found)"
		exit 0
	fi
fi

# Check if suggest was requested
if [ "$1" = "suggest" ]; then
	echo "temp"
	echo "mem_fb"
	echo "mem_bar"
	echo "power"
	echo "utilization"
	echo "throughput"
	echo "ecc"
	echo "pcie"
	echo "clocks"
	exit 0
fi

# Get number of GPUs
nGpusOutput=$("$nvSmiExec" -L)
nGpus=$(echo "$nGpusOutput" | wc -l)
if [ "$nGpus" -eq 0 ]; then
	# Exit if no GPUs found
	echo "No NVIDIA GPUs detected. Exiting."
	exit 1
fi

# Get full output from nvidia-smi
smiOutput=$("$nvSmiExec" -q)

# Check if config was requested
if [ "$1" = "config" ]; then

	# Get common info
	driverVersion=$(echo "$smiOutput" | grep "Driver Version" | cut -d : -f 2 | tr -d ' ')
	gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d '(' -f 1)

	# Configure graph depending on what which quantity will be plotted
	case $name in
		temp)
			echo 'graph_title GPU temperature'
			echo 'graph_args -l 0 -u 120'
			echo 'graph_vlabel degrees Celsius'
			echo 'graph_category sensors'
			echo "graph_info Temperature information for NVIDIA GPUs using driver version $driverVersion"

			echo "temp.label Temperature"
			echo "temp.warning ${warning:-91}"
			echo "temp.critical ${critical:-94}"
			echo "temp.info Temperature information for $gpuName"
			;;
		mem_fb)
			echo 'graph_title GPU FB Memory Usage'
			# echo 'graph_args -l 0 -u 10240'
			echo 'graph_vlabel MB'
			echo 'graph_category memory'
			echo "graph_info FB Memory usage for NVIDIA GPUs using driver version $driverVersion"

			echo "reserved.label Reserved"
			echo "reserved.draw STACK"
			echo "reserved.info Reserved GPU FB Memory Usage for $gpuName"

			echo "used.label Used"
			echo "used.draw STACK"
			echo "used.info Used GPU FB Memory Usage for $gpuName"

			echo "free.label Free"
			echo "free.draw STACK"
			echo "free.info Free GPU FB Memory Usage for $gpuName"
			;;
		mem_bar)
			echo 'graph_title GPU BAR1 Memory Usage'
			echo 'graph_vlabel MB'
			echo 'graph_category memory'
			echo "graph_info BAR1 Memory usage for NVIDIA GPUs using driver version $driverVersion"

			echo "used.label Used"
			echo "used.draw STACK"
			echo "used.info Used GPU BAR1 Memory Usage for $gpuName"

			echo "free.label Free"
			echo "free.draw STACK"
			echo "free.info Free GPU BAR1 Memory Usage for $gpuName"
			;;
		power)
			echo 'graph_title GPU power consumption'
			echo 'graph_vlabel Watts'
			echo 'graph_category sensors'
			echo "graph_info power consumption of NVIDIA GPUs using driver version $driverVersion"

			echo "power.label Power Consumption"
			echo "power.info power consumption of $gpuName"
			;;
		utilization)
			echo 'graph_title GPU utilization'
			echo 'graph_args -l 0 -u 100'
			echo 'graph_vlabel %'
			echo 'graph_category system'
			echo "graph_info GPU utilization of NVIDIA GPUs using driver version $driverVersion"

			echo "utilization_gpu.label GPU"
			echo "utilization_gpu.info GPU utilization information for $gpuName"

			echo "utilization_mem.label Memory"
			echo "utilization_mem.info Memory utilization information for $gpuName"

			echo "utilization_enc.label Encoder"
			echo "utilization_enc.info Encoder utilization information for $gpuName"

			echo "utilization_dec.label Decoder"
			echo "utilization_dec.info Decoder utilization information for $gpuName"
			;;
		throughput)
			echo 'graph_title GPU Throughput'
			echo 'graph_vlabel KB/sec'
			echo 'graph_category system'
			echo "graph_info Throughput of NVIDIA GPUs using driver version $driverVersion"

			echo "rx.label Rx"
			echo "rx.info Rx Throughput of $gpuName"

			echo "tx.label Tx"
			echo "tx.info Tx Throughput of $gpuName"
			;;
		ecc)
			echo 'graph_title GPU ECC Statistics'
			echo 'graph_vlabel Errors'
			echo 'graph_category memory'
			echo "graph_info ECC Statistics of NVIDIA GPUs using driver version $driverVersion"
			nGpusCounter=0
			while [ $nGpusCounter -lt "$nGpus" ]
			do
				gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d \( -f 1)
				echo "${name}${nGpusCounter}.vsb.info Volatile Single Bit ECC Errors of $gpuName"
				echo "${name}${nGpusCounter}.vdb.info Volatile Double Bit ECC Errors of $gpuName"
				echo "${name}${nGpusCounter}.asb.info Aggregate Single Bit ECC Errors of $gpuName"
				echo "${name}${nGpusCounter}.adb.info Aggregate Double Bit ECC Errors of $gpuName"
				: $((nGpusCounter=nGpusCounter+1))
				done
			;;
		pcie)
			echo 'graph_title GPU PCIe Statistics'
			#echo 'graph_vlabel Generation'
			echo 'graph_category system'
			echo "graph_info PCIe Statistics of NVIDIA GPUs using driver version $driverVersion"

			echo "max.label PCIe Gen Max"
			echo "max.info PCIe Max of $gpuName"

			echo "current.label PCIe Gen Current"
			echo "current.info PCIe Current of $gpuName"

			echo "device_current.label PCIe Gen Device Current"
			echo "device_current.info PCIe Device Current of $gpuName"

			echo "device_max.label PCIe Gen Device Max"
			echo "device_max.info PCIe Device Max of $gpuName"

			echo "host_max.label PCIe Gen Host Max"
			echo "host_max.info PCIe Host Max of $gpuName"

			echo "link_max.label PCIe Gen Link Max"
			echo "link_max.info Link Width Max of $gpuName"

			echo "link_current.label PCIe Gen Link Current"
			echo "link_current.info Link Width Current of $gpuName"

			echo "perf_state.label GPU Performance State"
			echo "perf_state.info GPU Performance State of $gpuName"
			;;
		clocks)
			echo 'graph_title GPU Clock Speeds'
			echo 'graph_category system'
			echo "graph_info GPU Clock Speeds of NVIDIA GPUs using driver version $driverVersion"

			echo "graphics.label Graphics"
			echo "graphics.info Graphics Clock Speed of $gpuName"

			echo "sm.label SM"
			echo "sm.info SM Clock Speed of $gpuName"

			echo "memory.label Memory"
			echo "memory.info Memory Clock Speed of $gpuName"

			echo "video.label Video"
			echo "video.info Video Clock Speed of $gpuName"
			;;
		*)
			echo "Can't run without a proper symlink. Exiting."
			echo "Try running munin-node-configure --suggest."
			exit 1
			;;
	esac

	exit 0
fi

# Get requested value
case $name in
	temp)
		temp=$(echo "$smiOutput" | grep "GPU Current Temp" | cut -d : -f 2 | cut -d ' ' -f 2)
		echo "temp.value ${temp}"
		;;
	mem_fb)
		mem_fb=$(echo "$smiOutput" | grep -A 4 "FB Memory Usage")

		reserved=$(echo "$mem_fb" | grep "Reserved" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "reserved.value ${reserved}"

		used=$(echo "$mem_fb" | grep "Used" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "used.value ${used}"

		free=$(echo "$mem_fb" | grep "Free" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "free.value ${free}"
		;;
	mem_bar)
		mem_bar=$(echo "$smiOutput" | grep -A 4 "BAR1 Memory Usage")

		used=$(echo "$mem_bar" | grep "Used" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "used.value ${used}"

		free=$(echo "$mem_bar" | grep "Free" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "free.value ${free}"
		;;
	power)
		power=$(echo "$smiOutput" | grep -A1 "GPU Power Readings" | grep "Power Draw" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "power.value ${power}"
		;;
	utilization)
		utilization=$(echo "$smiOutput" | grep -A 4 "Utilization")
		utilization_gpu=$(echo "$utilization" | grep "Gpu" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		utilization_mem=$(echo "$utilization" | grep "Memory" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		utilization_enc=$(echo "$utilization" | grep "Encoder" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		utilization_dec=$(echo "$utilization" | grep "Decoder" | cut -d ':' -f 2 | cut -d ' ' -f 2)

		echo "utilization_gpu.value ${utilization_gpu}"
		echo "utilization_mem.value ${utilization_mem}"
		echo "utilization_enc.value ${utilization_enc}"
		echo "utilization_dec.value ${utilization_dec}"
		;;
	throughput)
		rx=$(echo "$smiOutput" | grep "Rx Throughput" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		tx=$(echo "$smiOutput" | grep "Tx Throughput" | cut -d ':' -f 2 | cut -d ' ' -f 2)

		echo "rx.value ${rx}"
		echo "tx.value ${tx}"
		;;
	ecc)
		txGpus=$(echo "$smiOutput" | grep "Tx Throughput" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		valueGpus=''
		nGpusCounter=0
		while [ $nGpusCounter -lt "$nGpus" ]
		do
			kiloBitsPerSecond=$(echo "$txGpus" | sed -n $((nGpusCounter+1))p)
			bitsPerSecond=$((kiloBitsPerSecond*1024))
			valueGpus="${valueGpus}${bitsPerSecond}"$'\n'
			: $((nGpusCounter=nGpusCounter+1))
		done
		;;
	pcie)
		pcieGen=$(echo "$smiOutput" | grep -A 8 "PCIe Generation")

		max=$(echo "$pcieGen" | grep "Max" | head -n 1 | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "max.value ${max}"

		current=$(echo "$pcieGen" | grep "Current" | head -n 1 | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "current.value ${current}"

		device_current=$(echo "$pcieGen" | grep "Device Current" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "device_current.value ${device_current}"

		device_max=$(echo "$pcieGen" | grep "Device Max" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "device_max.value ${device_max}"

		host_max=$(echo "$pcieGen" | grep "Host Max" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "host_max.value ${host_max}"

		link_max=$(echo "$pcieGen" | grep -A 2 "Link Width" | grep "Max" | cut -d ':' -f 2 | cut -d ' ' -f 2 | rev | cut -c 2- | rev)
		echo "link_max.value ${link_max}"

		link_current=$(echo "$pcieGen" | grep -A 2 "Link Width" | grep "Current" | cut -d ':' -f 2 | cut -d ' ' -f 2 | rev | cut -c 2- | rev)
		echo "link_current.value ${link_current}"

		perf_state=$(echo "$smiOutput" | grep "Performance State" | cut -d ':' -f 2 | cut -d ' ' -f 2 | cut -c 2)
		echo "perf_state.value ${perf_state}"
		;;
	clocks)
		clocks=$(echo "$smiOutput" | grep -A 4 "^    Clocks$")

		graphics=$(echo "$clocks" | grep "Graphics" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "graphics.value ${graphics}"

		sm=$(echo "$clocks" | grep "SM" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "sm.value ${sm}"

		memory=$(echo "$clocks" | grep "Memory" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "memory.value ${memory}"

		video=$(echo "$clocks" | grep "Video" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "video.value ${video}"
		;;
	*)
		echo "Can't run without a proper symlink. Exiting."
		echo "Try running munin-node-configure --suggest."
		exit 1
		;;
	esac
