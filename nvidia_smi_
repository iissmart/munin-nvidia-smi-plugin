#!/bin/bash
# -*- sh -*-

: << =cut

=head1 NAME

nvidia_smi_ - Wildcard plugin to monitor NVIDIA GPUs. Uses nvidia-smi utility,
usually bundled with NVIDIA GPU driver, to obtain information.

=head1 CONFIGURATION

This is a wildcard plugin. The wildcard prefix link name should be the
value to monitor.

This plugin uses the following configuration variables:

 [nvidia_smi_*]
  env.smiexec - Location of nvidia-smi executable.
  env.warning - Warning temperature
  env.critical - Critical temperature

=head2 DEFAULT CONFIGURATION

The default configuration is to set "env.smiexec" to /usr/bin/nvidia-smi and
assume warning and critical temperatures of 91 and 94 degrees celsius, respectively.

=head2 EXAMPLE WILDCARD USAGE

C<ln -s /usr/share/munin/plugins/nvidia_smi_ /etc/munin/plugins/nvidia_smi_temp>

...will monitor the temperature of available GPUs.

=head1 AUTHOR

Original work: Nuno Fachada
faken@fakenmc.com

Enhancements: Ken Link
klink@numberzero.org

=head1 LICENSE

 GNU General Public License, version 2
 http://www.gnu.org/licenses/gpl-2.0.html

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf suggest

=cut

# Determine name of parameter to monitor
name=$(basename "$0" | sed 's/^nvidia_smi_//g')

# Get location of nvidia-smi executable or use default
nvSmiExec=${smiexec:-'/usr/bin/nvidia-smi'}

# Check if autoconf was requested
if [ "$1" = "autoconf" ]; then
	# Autoconf only returns yes if nvidia-smi exists and is executable
	if [ -x "$nvSmiExec" ]; then
		echo yes
		exit 0
	else
		echo "no (nvidia-smi executable not found)"
		exit 0
	fi
fi

# Check if suggest was requested
if [ "$1" = "suggest" ]; then
	echo "temp"
	echo "mem_fb"
	echo "mem_bar"
	echo "power"
	echo "utilization"
	echo "throughput"
	echo "ecc"
	echo "pcie"
	echo "clocks"
	echo "enc_stats"
	exit 0
fi

# Get number of GPUs
nGpusOutput=$("$nvSmiExec" -L)
nGpus=$(echo "$nGpusOutput" | wc -l)
if [ "$nGpus" -eq 0 ]; then
	# Exit if no GPUs found
	echo "No NVIDIA GPUs detected. Exiting."
	exit 1
fi

# Get full output from nvidia-smi
smiOutput=$("$nvSmiExec" -q)

# Check if config was requested
if [ "$1" = "config" ]; then

	# Get common info
	driverVersion=$(echo "$smiOutput" | grep "Driver Version" | cut -d : -f 2 | tr -d ' ')
	gpuName=$(echo "$nGpusOutput" | sed -n $((nGpusCounter+1))p | cut -d '(' -f 1)

	# Configure graph depending on what which quantity will be plotted
	case $name in
		temp)
			echo 'graph_title GPU temperature'
			echo 'graph_args -l 0 -u 120'
			echo 'graph_vlabel degrees Celsius'
			echo 'graph_category gpu'
			echo "graph_info Temperature information for NVIDIA GPUs using driver version $driverVersion"

			echo "temp.label Temperature"
			echo "temp.warning ${warning:-91}"
			echo "temp.critical ${critical:-94}"
			echo "temp.info Temperature information for $gpuName"
			;;
		mem_fb)
			echo 'graph_title GPU FB Memory Usage'
			echo 'graph_args --base 1024'
			echo 'graph_vlabel Bytes'
			echo 'graph_category gpu'
			echo "graph_info FB Memory usage for NVIDIA GPUs using driver version $driverVersion"

			echo "reserved.label Reserved"
			echo "reserved.draw AREA"
			echo "reserved.info Reserved GPU FB Memory Usage for $gpuName"

			echo "used.label Used"
			echo "used.draw STACK"
			echo "used.info Used GPU FB Memory Usage for $gpuName"

			echo "free.label Free"
			echo "free.draw STACK"
			echo "free.info Free GPU FB Memory Usage for $gpuName"
			;;
		mem_bar)
			echo 'graph_title GPU BAR1 Memory Usage'
			echo 'graph_args --base 1024'
			echo 'graph_vlabel Bytes'
			echo 'graph_category gpu'
			echo "graph_info BAR1 Memory usage for NVIDIA GPUs using driver version $driverVersion"

			echo "used.label Used"
			echo "used.draw AREA"
			echo "used.info Used GPU BAR1 Memory Usage for $gpuName"

			echo "free.label Free"
			echo "free.draw STACK"
			echo "free.info Free GPU BAR1 Memory Usage for $gpuName"
			;;
		power)
			echo 'graph_title GPU power consumption'
			echo 'graph_vlabel Watts'
			echo 'graph_category gpu'
			echo "graph_info power consumption of NVIDIA GPUs using driver version $driverVersion"

			echo "power.label Power Consumption"
			echo "power.info power consumption of $gpuName"
			;;
		utilization)
			echo 'graph_title GPU utilization'
			echo 'graph_args -l 0 -u 100'
			echo 'graph_vlabel %'
			echo 'graph_category gpu'
			echo "graph_info GPU utilization of NVIDIA GPUs using driver version $driverVersion"

			echo "utilization_gpu.label GPU"
			echo "utilization_gpu.info GPU utilization information for $gpuName"

			echo "utilization_mem.label Memory"
			echo "utilization_mem.info Memory utilization information for $gpuName"

			echo "utilization_enc.label Encoder"
			echo "utilization_enc.info Encoder utilization information for $gpuName"

			echo "utilization_dec.label Decoder"
			echo "utilization_dec.info Decoder utilization information for $gpuName"
			;;
		throughput)
			echo 'graph_title GPU Throughput'
			echo 'graph_vlabel Bytes/sec'
			echo 'graph_category gpu'
			echo "graph_info Throughput of NVIDIA GPUs using driver version $driverVersion"

			echo "rx.label Rx"
			echo "rx.info Rx Throughput of $gpuName"

			echo "tx.label Tx"
			echo "tx.info Tx Throughput of $gpuName"
			;;
		ecc)
			echo 'graph_title GPU ECC Statistics'
			echo 'graph_category gpu'
			echo "graph_info ECC Statistics of NVIDIA GPUs using driver version $driverVersion"

			echo "volatile_sb.label Volatile Single Bit Errors"
			echo "volatile_sb.info Volatile Single Bit Errors for $gpuName"

			echo "volatile_db.label Volatile Double Bit Errors"
			echo "volatile_db.info Volatile Double Bit Errors for $gpuName"

			echo "aggregate_sb.label Aggregate Single Bit Errors"
			echo "aggregate_sb.info Aggregate Single Bit Errors for $gpuName"

			echo "aggregate_db.label Aggregate Double Bit Errors"
			echo "aggregate_db.info Aggregate Double Bit Errors for $gpuName"

			echo "retired_sb.label Retired Single Bit Pages"
			echo "retired_sb.info Retired Single Bit Pages for $gpuName"

			echo "retired_db.label Retired Double Bit Pages"
			echo "retired_db.info Retired Double Bit Pages for $gpuName"
			;;
		pcie)
			echo 'graph_title GPU PCIe Statistics'
			#echo 'graph_vlabel Generation'
			echo 'graph_category gpu'
			echo "graph_info PCIe Statistics of NVIDIA GPUs using driver version $driverVersion"

			echo "max.label PCIe Gen Max"
			echo "max.info PCIe Max of $gpuName"

			echo "current.label PCIe Gen Current"
			echo "current.info PCIe Current of $gpuName"

			echo "device_current.label PCIe Gen Device Current"
			echo "device_current.info PCIe Device Current of $gpuName"

			echo "device_max.label PCIe Gen Device Max"
			echo "device_max.info PCIe Device Max of $gpuName"

			echo "host_max.label PCIe Gen Host Max"
			echo "host_max.info PCIe Host Max of $gpuName"

			echo "link_max.label PCIe Gen Link Max"
			echo "link_max.info Link Width Max of $gpuName"

			echo "link_current.label PCIe Gen Link Current"
			echo "link_current.info Link Width Current of $gpuName"

			echo "perf_state.label GPU Performance State"
			echo "perf_state.info GPU Performance State of $gpuName"
			;;
		clocks)
			echo 'graph_title GPU Clock Speeds'
			echo 'graph_vlabel Hz'
			echo 'graph_category gpu'
			echo "graph_info GPU Clock Speeds of NVIDIA GPUs using driver version $driverVersion"

			echo "graphics.label Graphics"
			echo "graphics.info Graphics Clock Speed of $gpuName"

			echo "sm.label SM"
			echo "sm.info SM Clock Speed of $gpuName"

			echo "memory.label Memory"
			echo "memory.info Memory Clock Speed of $gpuName"

			echo "video.label Video"
			echo "video.info Video Clock Speed of $gpuName"
			;;
		enc_stats)
			echo "multigraph enc_stats_fps"
			echo 'graph_title GPU Encoder Statistics - FPS'
			echo 'graph_category gpu'
			echo "graph_info GPU Encoder Statistics of NVIDIA GPUs using driver version $driverVersion"

			echo "sessions.label Active Sessions"
			echo "sessions.info Active Sessions of $gpuName"

			echo "fps.label Average FPS"
			echo "fps.info Average FPS of $gpuName"

			echo "multigraph enc_stats_latency"
			echo 'graph_title GPU Encoder Statistics - Latency'
			echo 'graph_category gpu'
			echo "graph_info GPU Encoder Statistics of NVIDIA GPUs using driver version $driverVersion"

			echo "latency.label Average Latency"
			echo "latency.info Average Latency of $gpuName"
			;;
		*)
			echo "Can't run without a proper symlink. Exiting."
			echo "Try running munin-node-configure --suggest."
			exit 1
			;;
	esac

	exit 0
fi

# Get requested value
case $name in
	temp)
		temp=$(echo "$smiOutput" | grep "GPU Current Temp" | cut -d : -f 2 | cut -d ' ' -f 2)
		echo "temp.value ${temp}"
		;;
	mem_fb)
		mem_fb=$(echo "$smiOutput" | grep -A 4 "FB Memory Usage")

		reserved=$(echo "$mem_fb" | grep "Reserved" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		reserved_bytes=$((reserved*1024*1024))
		echo "reserved.value ${reserved_bytes}"

		used=$(echo "$mem_fb" | grep "Used" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		used_bytes=$((used*1024*1024))
		echo "used.value ${used_bytes}"

		free=$(echo "$mem_fb" | grep "Free" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		free_bytes=$((free*1024*1024))
		echo "free.value ${free_bytes}"
		;;
	mem_bar)
		mem_bar=$(echo "$smiOutput" | grep -A 4 "BAR1 Memory Usage")

		used=$(echo "$mem_bar" | grep "Used" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		used_bytes=$((used*1024*1024))
		echo "used.value ${used_bytes}"

		free=$(echo "$mem_bar" | grep "Free" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		free_bytes=$((free*1024*1024))
		echo "free.value ${free_bytes}"
		;;
	power)
		power=$(echo "$smiOutput" | grep -A1 "GPU Power Readings" | grep "Power Draw" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "power.value ${power}"
		;;
	utilization)
		utilization=$(echo "$smiOutput" | grep -A 4 "Utilization")
		utilization_gpu=$(echo "$utilization" | grep "Gpu" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		utilization_mem=$(echo "$utilization" | grep "Memory" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		utilization_enc=$(echo "$utilization" | grep "Encoder" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		utilization_dec=$(echo "$utilization" | grep "Decoder" | cut -d ':' -f 2 | cut -d ' ' -f 2)

		echo "utilization_gpu.value ${utilization_gpu}"
		echo "utilization_mem.value ${utilization_mem}"
		echo "utilization_enc.value ${utilization_enc}"
		echo "utilization_dec.value ${utilization_dec}"
		;;
	throughput)
		rx=$(echo "$smiOutput" | grep "Rx Throughput" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		rx_bps=$((rx*1024))
		echo "rx.value ${rx_bps}"
		
		tx=$(echo "$smiOutput" | grep "Tx Throughput" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		tx_bps=$((tx*1024))
		echo "tx.value ${tx_bps}"
		;;
	ecc)
		ecc=$(echo "$smiOutput" | grep -A 41 "ECC Errors")

		ecc_vol_sb=$(echo "$ecc" | grep -A 18 "Volatile" | grep -A 1 "Single Bit" | grep "Device Memory" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "volatile_sb.value ${ecc_vol_sb}"
		
		ecc_vol_db=$(echo "$ecc" | grep -A 18 "Volatile" | grep -A 1 "Double Bit" | grep "Device Memory" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "volatile_db.value ${ecc_vol_db}"
		
		ecc_agg_sb=$(echo "$ecc" | grep -A 18 "Aggregate" | grep -A 1 "Single Bit" | grep "Device Memory" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "aggregate_sb.value ${ecc_agg_sb}"
		
		ecc_agg_db=$(echo "$ecc" | grep -A 18 "Aggregate" | grep -A 1 "Double Bit" | grep "Device Memory" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "aggregate_db.value ${ecc_agg_db}"
		
		ecc_ret_sb=$(echo "$ecc" | grep -A 2 "Retired Pages" | grep "Single Bit ECC" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "retired_sb.value ${ecc_ret_sb}"
		
		ecc_ret_db=$(echo "$ecc" | grep -A 2 "Retired Pages" | grep "Double Bit ECC" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "retired_db.value ${ecc_ret_db}"
		;;
	pcie)
		pcieGen=$(echo "$smiOutput" | grep -A 8 "PCIe Generation")

		max=$(echo "$pcieGen" | grep "Max" | head -n 1 | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "max.value ${max}"

		current=$(echo "$pcieGen" | grep "Current" | head -n 1 | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "current.value ${current}"

		device_current=$(echo "$pcieGen" | grep "Device Current" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "device_current.value ${device_current}"

		device_max=$(echo "$pcieGen" | grep "Device Max" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "device_max.value ${device_max}"

		host_max=$(echo "$pcieGen" | grep "Host Max" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "host_max.value ${host_max}"

		link_max=$(echo "$pcieGen" | grep -A 2 "Link Width" | grep "Max" | cut -d ':' -f 2 | cut -d ' ' -f 2 | rev | cut -c 2- | rev)
		echo "link_max.value ${link_max}"

		link_current=$(echo "$pcieGen" | grep -A 2 "Link Width" | grep "Current" | cut -d ':' -f 2 | cut -d ' ' -f 2 | rev | cut -c 2- | rev)
		echo "link_current.value ${link_current}"

		perf_state=$(echo "$smiOutput" | grep "Performance State" | cut -d ':' -f 2 | cut -d ' ' -f 2 | cut -c 2)
		echo "perf_state.value ${perf_state}"
		;;
	clocks)
		clocks=$(echo "$smiOutput" | grep -A 4 "^    Clocks$")

		graphics=$(echo "$clocks" | grep "Graphics" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		graphics_hz=$((graphics*1024*1024))
		echo "graphics.value ${graphics_hz}"

		sm=$(echo "$clocks" | grep "SM" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		sm_hz=$((sm*1024*1024))
		echo "sm.value ${sm_hz}"

		memory=$(echo "$clocks" | grep "Memory" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		memory_hz=$((memory*1024*1024))
		echo "memory.value ${memory_hz}"

		video=$(echo "$clocks" | grep "Video" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		video_hz=$((video*1024*1024))
		echo "video.value ${video_hz}"
		;;
	enc_stats)
		enc_stats=$(echo "$smiOutput" | grep -A 3 "Encoder Stats")

		echo "multigraph enc_stats_fps"

		sessions=$(echo "$enc_stats" | grep "Active Sessions" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "sessions.value ${sessions}"

		fps=$(echo "$enc_stats" | grep "Average FPS" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "fps.value ${fps}"

		echo "multigraph enc_stats_latency"

		latency=$(echo "$enc_stats" | grep "Average Latency" | cut -d ':' -f 2 | cut -d ' ' -f 2)
		echo "latency.value ${latency}"
		;;
	*)
		echo "Can't run without a proper symlink. Exiting."
		echo "Try running munin-node-configure --suggest."
		exit 1
		;;
	esac
